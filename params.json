{
  "name": "Java-设计模式",
  "tagline": "Design patterns implemented in Java",
  "body": "<!-- the line below needs to be an empty line C: (its because kramdown isnt\r\n     that smart and dearly wants an empty line before a heading to be able to\r\n     display it as such, e.g. website) -->\r\n\r\n# Design patterns implemented in Java\r\n\r\n[![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master)](https://travis-ci.org/iluwatar/java-design-patterns)\r\n[![License MIT](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/iluwatar/java-design-patterns/master/LICENSE.md)\r\n[![Join the chat at https://gitter.im/iluwatar/java-design-patterns](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/iluwatar/java-design-patterns?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns)\r\n\r\n# Introduction\r\n\r\nDesign patterns are formalized best practices that the programmer can use to\r\nsolve common problems when designing an application or system.\r\n\r\nDesign patterns can speed up the development process by providing tested, proven\r\ndevelopment paradigms.\r\n\r\nReusing design patterns helps to prevent subtle issues that can cause major\r\nproblems, and it also improves code readability for coders and architects who\r\nare familiar with the patterns.\r\n\r\n# Getting started\r\n\r\nBefore you dive into the material, you should be familiar with various\r\nProgramming/Software Design Principles.\r\n\r\nAll designs should be as simple as possible. You should start with KISS, YAGNI,\r\nand Do The Simplest Thing That Could Possibly Work principles. Complexity and\r\npatterns should only be introduced when they are needed for practical\r\nextensibility.\r\n\r\nOnce you are familiar with these concepts you can start drilling down into\r\npatterns by any of the following approaches\r\n\r\n - Using difficulty tags, `Difficulty-Beginner`, `Difficulty-Intermediate` & `Difficulty-Expert`.\r\n - Using pattern categories, `Creational`, `Behavioral` and others.\r\n - Search for a specific pattern. Can't find one? Please report a new pattern [here](https://github.com/iluwatar/java-design-patterns/issues).\r\n\r\n# How to contribute\r\n\r\nIf you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki). We will help you and answer your questions in the [Gitter chatroom](https://gitter.im/iluwatar/java-design-patterns).\r\n\r\n# License\r\n\r\nThis project is licensed under the terms of the MIT license.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}